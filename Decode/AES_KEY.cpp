#include "AES_KEY.h"

#define NO_START 0x00
#define LEFT_MOVE 0x01
#define GET_S_NUM 0x02
#define RCON_DEAL 0x03
//定义初始密钥
const unsigned char Key0[4][4] = {
    {0xa1, 0xa2, 0xa3, 0xa4},
    {0xb1, 0xb2, 0xb3, 0xb4},
    {0xc1, 0xc2, 0xc3, 0xc4},
    {0xd1, 0xd2, 0xd3, 0xd4},
};
unsigned char array_4x4[4][4]; //定义为局部变量升级时间会变长约2s
//扩展后的完整密钥存放数组
unsigned char Key[44][4];
//定义S盒
const unsigned char S[16][16] = {
    {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
    {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
    {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
    {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
    {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
    {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
    {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
    {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
    {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
    {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
    {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
    {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
    {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
    {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
    {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
    {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
//定义逆S盒
const unsigned char ReS[16][16] = {
    {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
    {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
    {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
    {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
    {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
    {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
    {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
    {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
    {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
    {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
    {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
    {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
    {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
    {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
    {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
    {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};
//常亮轮值表，用于秘钥扩展
const unsigned char Rcon[10][4] = {
    {0x01, 0, 0, 0}, {0x02, 0, 0, 0},
    {0x04, 0, 0, 0}, {0x08, 0, 0, 0},
    {0x10, 0, 0, 0}, {0x20, 0, 0, 0},
    {0x40, 0, 0, 0}, {0x80, 0, 0, 0},
    {0x1b, 0, 0, 0}, {0x36, 0, 0, 0}};

//列混淆正矩阵
unsigned char Colimn[4][4] = {
    {0x02, 0x03, 0x01, 0x01},
    {0x01, 0x02, 0x03, 0x01},
    {0x01, 0x01, 0x02, 0x03},
    {0x03, 0x01, 0x01, 0x02},
};

//列混淆逆矩阵
const unsigned char ReColimn[4][4] = {
    {0x0e, 0x0b, 0x0d, 0x09},
    {0x09, 0x0e, 0x0b, 0x0d},
    {0x0d, 0x09, 0x0e, 0x0b},
    {0x0b, 0x0d, 0x09, 0x0e},
};
unsigned char Rcon_Return[4]; //密钥扩展时的中转buf
/*函数声明*/
void ExtendKey(void);
void T(unsigned char index, unsigned char rcon_index);
void AddRoundKey(unsigned char array[4][4], unsigned char round);
void ReSubBytes(unsigned char array[4][4]);
void ReRowMove(unsigned char array[4][4]);
unsigned char GFMul_2(unsigned char s);
unsigned char GFMul_3(unsigned char s);
unsigned char GFMul_9(unsigned char s);
unsigned char GFMul_B(unsigned char s);
unsigned char GFMul_D(unsigned char s);
unsigned char GFMul_E(unsigned char s);
unsigned char GFMul(unsigned char n, unsigned char s);
void ReColimnMix(unsigned char array[4][4]);
void LockData(unsigned char array[16]);
void UnLockData(unsigned char array_16[16]);

//将16字节密钥扩展
void ExtendKey()
{
    unsigned char i = 0u, j = 0u;
    for (j = 0u; j < 4u; j++)
    {
        for (i = 0u; i < 4u; i++)
        {
            Key[j][i] = Key0[j][i];
        }
    }
    for (i = 4u; i < 44u; i++)
    {
        if (i % 4u == 0u) // 4的倍数需要另作处理
        {
            T(i - 1, (i / 4) - 1);
            Key[i][0] = Key[i - 4][0] ^ Rcon_Return[0];
            Key[i][1] = Key[i - 4][1] ^ Rcon_Return[1];
            Key[i][2] = Key[i - 4][2] ^ Rcon_Return[2];
            Key[i][3] = Key[i - 4][3] ^ Rcon_Return[3];
        }
        else
        {
            Key[i][0] = Key[i - 4][0] ^ Key[i - 1][0];
            Key[i][1] = Key[i - 4][1] ^ Key[i - 1][1];
            Key[i][2] = Key[i - 4][2] ^ Key[i - 1][2];
            Key[i][3] = Key[i - 4][3] ^ Key[i - 1][3];
        }
    }
}
//密钥扩展为4的倍数时用到的扩展步骤
void T(unsigned char index, unsigned char rcon_index)
{
    unsigned char Array[4];
    static unsigned char i = 0u;
    unsigned char step = LEFT_MOVE;
    switch (step)
    {
    case LEFT_MOVE: //循环左移一位
        Array[3] = Key[index][0];
        for (i = 0u; i < 3u; i++)
        {
            Array[i] = Key[index][i + 1];
        }
        step = GET_S_NUM;
    case GET_S_NUM: //从S盒取值
        for (i = 0u; i < 4u; i++)
        {
            Array[i] = S[(Array[i] >> 4)][(Array[i]) & 0x0f];
        }
        step = RCON_DEAL;
    case RCON_DEAL: //与常亮轮值表进行异或
        for (i = 0u; i < 4u; i++)
        {
            Rcon_Return[i] = Array[i] ^ Rcon[rcon_index][i];
        }
        step = NO_START;
        break;
    default:
        break;
    }
}
//轮密钥加，将部分密钥与明文异或
void AddRoundKey(unsigned char array[4][4], unsigned char round)
{
    unsigned char i; //此处定义为 unsigned int后升级时间会变长
    for (i = 0u; i < 4u; i++)
    {
        array[i][0] = array[i][0] ^ Key[4 * round + i][0];
        array[i][1] = array[i][1] ^ Key[4 * round + i][1];
        array[i][2] = array[i][2] ^ Key[4 * round + i][2];
        array[i][3] = array[i][3] ^ Key[4 * round + i][3];
    }
}
//逆字节代换
void ReSubBytes(unsigned char array[4][4])
{
    unsigned int i; //此处定义为  unsigned char后升级时间会变长
    for (i = 0u; i < 4u; i++)
    {
        array[i][0] = ReS[array[i][0] >> 4][(array[i][0]) & 0x0f];
        array[i][1] = ReS[array[i][1] >> 4][(array[i][1]) & 0x0f];
        array[i][2] = ReS[array[i][2] >> 4][(array[i][2]) & 0x0f];
        array[i][3] = ReS[array[i][3] >> 4][(array[i][3]) & 0x0f];
    }
}

//逆行位移（循环右移）
void ReRowMove(unsigned char array[4][4])
{
    unsigned char SubStep = 0u;
    unsigned int i = 0u; //此处定义为  unsigned char后升级时间会变长
    unsigned char RowArray[4];
    switch (SubStep)
    {
    case 0: //第一行不位移
        SubStep++;
    case 1: //第二行右移一位
        RowArray[0] = array[SubStep][3];
        RowArray[1] = array[SubStep][0];
        RowArray[2] = array[SubStep][1];
        RowArray[3] = array[SubStep][2];
        for (i = 0u; i < 4u; i++)
            array[SubStep][i] = RowArray[i];
        SubStep++;
    case 2: //第三行右移两位
        RowArray[0] = array[SubStep][2];
        RowArray[1] = array[SubStep][3];
        RowArray[2] = array[SubStep][0];
        RowArray[3] = array[SubStep][1];
        for (i = 0u; i < 4u; i++)
            array[SubStep][i] = RowArray[i];
        SubStep++;
    case 3: //第四行右移三位
        RowArray[0] = array[SubStep][1];
        RowArray[1] = array[SubStep][2];
        RowArray[2] = array[SubStep][3];
        RowArray[3] = array[SubStep][0];
        for (i = 0u; i < 4u; i++)
            array[SubStep][i] = RowArray[i];
        SubStep++;
        break;
    default:
        break;
    }
}

//逆列混淆
void ReColimnMix(unsigned char array[4][4])
{
    unsigned char temp[4][4];
    unsigned int i = 0u, j = 0u; //此处定义为  unsigned char后升级时间会变长
    for (i = 0u; i < 4u; i++)
    {
        temp[i][0] = array[i][0];
        temp[i][1] = array[i][1];
        temp[i][2] = array[i][2];
        temp[i][3] = array[i][3];
    }
    for (i = 0u; i < 4u; i++)
    {
        for (j = 0u; j < 4u; j++)
        {
            array[i][j] = GFMul(ReColimn[i][0], temp[0][j]) ^ GFMul(ReColimn[i][1], temp[1][j]) ^ GFMul(ReColimn[i][2], temp[2][j]) ^ GFMul(ReColimn[i][3], temp[3][j]);
        }
    }
}
//逆列混淆计算
unsigned char GFMul(unsigned char n, unsigned char s)
{
    unsigned char GFStep = n;
    switch (GFStep)
    {
    case 1u:
        return s;
    case 2u:
        return GFMul_2(s);
    case 3u:
        return GFMul_3(s);
    case 9u:
        return GFMul_9(s);
    case 11u:
        return GFMul_B(s);
    case 13u:
        return GFMul_D(s);
    case 14u:
        return GFMul_E(s);
    default:
        break;
    }
    return 0u;
}
// 2*X
unsigned char GFMul_2(unsigned char s)
{
    unsigned char Result = s << 1;
    unsigned char a7 = s >> 7;

    if (a7 == 1u)
    {
        Result = Result ^ 0x1b;
    }
    return Result;
}
// 3*X
unsigned char GFMul_3(unsigned char s)
{
    return GFMul_2(s) ^ s;
}
// 9*X
unsigned char GFMul_9(unsigned char s)
{
    return GFMul_2(GFMul_2(GFMul_2(s))) ^ s;
}
// 11*X
unsigned char GFMul_B(unsigned char s)
{
    return GFMul_9(s) ^ GFMul_2(s);
}
// 13*X
unsigned char GFMul_D(unsigned char s)
{
    return GFMul_9(s) ^ GFMul_2(GFMul_2(s));
}
// 14*X
unsigned char GFMul_E(unsigned char s)
{
    return GFMul_2(GFMul_2(GFMul_2(s))) ^ GFMul_2(GFMul_2(s)) ^ GFMul_2(s);
}


//解密
void UnLockData(unsigned char array_16[16])
{
    unsigned char j, i;

    for (j = 0u; j < 4u; j++)
    {
        for (i = 0u; i < 4u; i++)
        {
            array_4x4[j][i] = array_16[j * 4 + i];
        }
    }

    AddRoundKey(array_4x4, 10u);

    for (i = 9u; i > 0u; i--)
    {
        ReRowMove(array_4x4);
        ReSubBytes(array_4x4);
        AddRoundKey(array_4x4, i);
        ReColimnMix(array_4x4);
    }
    ReRowMove(array_4x4);
    ReSubBytes(array_4x4);
    AddRoundKey(array_4x4, 0);

    for (j = 0u; j < 4u; j++)
    {
        for (i = 0u; i < 4u; i++)
        {
            array_16[j * 4u + i] = array_4x4[j][i];
        }
    }
}


/*!
    \brief          解密一包数据
    \author         WSY
    \date           2020/06/10
    \Description:   升级器一包数据256字节，一次只能解密16字节，
                                    需要将一包升级数据分为16次解密，解密数据放
                                    回原数组
*/
void UnLockBox(unsigned char *pBuffer) // pBuffer长度为256
{
    unsigned char UnLockBuf[16], i, j;

    for (i = 0u; i < 16; i++)
    {
        for (j = 0u; j < 16; j++)
        {
            UnLockBuf[j] = pBuffer[i * 16 + j];
        }
        UnLockData(UnLockBuf);
        for (j = 0u; j < 16; j++)
        {
            pBuffer[i * 16 + j] = UnLockBuf[j];
        }
    }
}
